#!/usr/bin/env python3
import sys
import os
import tempfile
import subprocess
import re
import glob
import requests
import json
from datetime import datetime

def get_video_metadata(url):
    """Ottiene metadati del video YouTube"""
    try:
        cmd = ['yt-dlp', '--dump-json', '--no-download', url]
        result = subprocess.run(cmd, capture_output=True, text=True)
        if result.returncode == 0:
            data = json.loads(result.stdout)
            return {
                'title': data.get('title', 'N/A'),
                'channel': data.get('uploader', 'N/A'),
                'upload_date': data.get('upload_date', 'N/A'),
                'duration': data.get('duration', 0),
                'view_count': data.get('view_count', 0),
                'description': data.get('description', '')[:200] + '...' if data.get('description') else 'N/A'
            }
    except:
        pass
    return {
        'title': 'N/A', 'channel': 'N/A', 'upload_date': 'N/A', 
        'duration': 0, 'view_count': 0, 'description': 'N/A'
    }

def improve_transcript_with_openai(transcript, metadata, api_key):
    """Migliora la trascrizione usando OpenAI"""
    if not api_key:
        return transcript, "Elaborazione OpenAI non disponibile (chiave API mancante)"
    
    prompt = f"""Migliora questa trascrizione di un video YouTube senza modificarne il contenuto sostanziale:

COMPITI:
1. Correggi errori di battitura e grammatica
2. Dividi in paragrafi logici
3. Mantieni il tono e il contenuto originale
4. NON aggiungere informazioni non presenti nel testo

TRASCRIZIONE ORIGINALE:
{transcript}

Rispondi SOLO con il testo migliorato, senza commenti aggiuntivi."""

    try:
        response = requests.post(
            'https://api.openai.com/v1/chat/completions',
            headers={
                'Authorization': f'Bearer {api_key}',
                'Content-Type': 'application/json'
            },
            json={
                'model': 'gpt-4o-mini',
                'messages': [{'role': 'user', 'content': prompt}],
                'max_tokens': 4000,
                'temperature': 0.3
            }
        )
        
        if response.status_code == 200:
            improved = response.json()['choices'][0]['message']['content']
            
            # Genera sintesi
            summary_prompt = f"Scrivi una sintesi di massimo 2-3 frasi del seguente testo:\n\n{improved}"
            summary_response = requests.post(
                'https://api.openai.com/v1/chat/completions',
                headers={
                    'Authorization': f'Bearer {api_key}',
                    'Content-Type': 'application/json'
                },
                json={
                    'model': 'gpt-4o-mini',
                    'messages': [{'role': 'user', 'content': summary_prompt}],
                    'max_tokens': 200,
                    'temperature': 0.3
                }
            )
            
            summary = "Sintesi non disponibile"
            if summary_response.status_code == 200:
                summary = summary_response.json()['choices'][0]['message']['content']
            
            return improved, summary
        else:
            return transcript, "Errore nell'elaborazione OpenAI"
    except Exception as e:
        return transcript, f"Errore OpenAI: {str(e)}"

def clean_youtube_url(url):
    """Pulisce URL YouTube da parametri di tracking"""
    # Estrae solo video ID
    patterns = [
        r'(?:youtube\.com/watch\?v=|youtu\.be/)([a-zA-Z0-9_-]{11})',
        r'youtube\.com/embed/([a-zA-Z0-9_-]{11})',
    ]
    
    for pattern in patterns:
        match = re.search(pattern, url)
        if match:
            video_id = match.group(1)
            return f"https://youtu.be/{video_id}"
    
    return url

def setup_api_key():
    """Configura chiavi API interattivamente"""
    print("\n🔑 Configurazione API Keys")
    print("1. Groq API (OBBLIGATORIA): https://console.groq.com/keys")
    print("2. OpenAI API (OPZIONALE): https://platform.openai.com/api-keys")
    print()
    
    groq_key = input("Incolla qui la tua chiave Groq API: ").strip()
    openai_key = input("Incolla qui la tua chiave OpenAI (Enter per saltare): ").strip()
    
    if not groq_key:
        print("❌ Chiave Groq obbligatoria non inserita")
        return False
    
    # Salva in .zshrc
    zshrc = os.path.expanduser("~/.zshrc")
    with open(zshrc, "a") as f:
        f.write(f"\n# YouTube Transcriber\nexport GROQ_API_KEY=\"{groq_key}\"\n")
        if openai_key:
            f.write(f"export OPENAI_API_KEY=\"{openai_key}\"\n")
    
    # Imposta per sessione corrente
    os.environ['GROQ_API_KEY'] = groq_key
    if openai_key:
        os.environ['OPENAI_API_KEY'] = openai_key
    
    print("✅ Chiavi API configurate!")
    if openai_key:
        print("🤖 OpenAI abilitato per miglioramento trascrizioni")
    print("💡 Riavvia il terminale per renderle permanenti")
    return True

def get_groq_key():
    """Ottieni chiave API con setup automatico se mancante"""
    key = os.getenv('GROQ_API_KEY')
    if not key:
        print("❌ Chiave API Groq non trovata")
        if input("Vuoi configurarla ora? (s/n): ").lower().startswith('s'):
            return setup_api_key()
        else:
            print("💡 Configura manualmente: export GROQ_API_KEY='la_tua_chiave'")
            return False
    return key

def show_help():
    """Mostra aiuto"""
    print("""
🎥 YouTube Transcriber - Aiuto

📖 USO:
  transcribe                          # Modalità interattiva
  trascrivi                           # Modalità interattiva (italiano)
  transcribe URL_YOUTUBE              # Trascrivi video
  trascrivi https://youtu.be/abc123   # Trascrivi video (italiano)
  transcribe /path/file.mp3           # Trascrivi file audio
  transcribe --help                   # Mostra questo aiuto
  transcribe --setup                  # Configura API key

📝 ESEMPI:
  transcribe https://youtu.be/dQw4w9WgXcQ
  trascrivi https://youtu.be/dQw4w9WgXcQ
  transcribe /Users/nome/audio.mp3

🔧 CONFIGURAZIONE:
  - Serve una chiave API Groq gratuita
  - Ottienila da: https://console.groq.com/keys
  - Limite: 25MB per file audio

💡 SUGGERIMENTI:
  - Puoi incollare URL senza virgolette
  - I parametri di tracking vengono rimossi automaticamente
  - Formati supportati: mp3, m4a, wav, webm, ogg, flac
  - Funziona con entrambi i comandi: transcribe e trascrivi
""")

def interactive_mode():
    """Modalità interattiva per utenti non tecnici"""
    print("🎥 YouTube Transcriber")
    print("=" * 30)
    
    while True:
        print("\n📋 Cosa vuoi fare?")
        print("1. Trascrivere video YouTube")
        print("2. Trascrivere file audio locale")
        print("3. Configurare API key")
        print("4. Aiuto")
        print("5. Esci")
        
        choice = input("\nScegli (1-5): ").strip()
        
        if choice == "1":
            url = input("\n📎 Incolla URL YouTube (senza virgolette): ").strip()
            if url:
                process_youtube(url)
        elif choice == "2":
            file_path = input("\n📁 Percorso file audio: ").strip()
            if file_path:
                process_audio_file(file_path)
        elif choice == "3":
            setup_api_key()
        elif choice == "4":
            show_help()
        elif choice == "5":
            print("👋 Arrivederci!")
            break
        else:
            print("❌ Scelta non valida")

def extract_audio_from_youtube(url):
    """Estrae audio da YouTube"""
    import tempfile
    temp_dir = tempfile.mkdtemp()
    base_name = os.path.join(temp_dir, "audio")
    
    cmd = ['yt-dlp', '--extract-audio', '--audio-format', 'mp3', 
           '--audio-quality', '64K', '-o', base_name, url]
    
    result = subprocess.run(cmd, capture_output=True, text=True)
    if result.returncode != 0:
        raise Exception(f"Errore download: {result.stderr.strip()}")
    
    # Trova il file scaricato
    files = glob.glob(base_name + '*.mp3')
    if not files:
        raise Exception("File audio non trovato")
    
    return files[0]

def transcribe_audio(audio_file, api_key):
    """Trascrivi con Groq usando requests"""
    import requests
    
    with open(audio_file, 'rb') as f:
        response = requests.post(
            'https://api.groq.com/openai/v1/audio/transcriptions',
            headers={'Authorization': f'Bearer {api_key}'},
            files={'file': f},
            data={'model': 'whisper-large-v3', 'language': 'it'}
        )
    
    if response.status_code != 200:
        raise Exception(f"Errore API: {response.status_code}")
    
    return response.json().get('text', '')

def process_youtube(url):
    """Processa video YouTube"""
    api_key = get_groq_key()
    if not api_key:
        return
    
    try:
        # Pulisci URL
        clean_url = clean_youtube_url(url)
        if clean_url != url:
            print(f"🧹 URL pulito: {clean_url}")
        
        # Ottieni metadati video
        print("📊 Recuperando metadati video...")
        metadata = get_video_metadata(clean_url)
        
        print("📥 Scaricando audio...")
        audio_file = extract_audio_from_youtube(clean_url)
        
        size_mb = os.path.getsize(audio_file) / (1024 * 1024)
        if size_mb > 25:
            print(f"⚠️ File troppo grande: {size_mb:.1f}MB (limite: 25MB)")
            return
        
        print(f"🎤 Trascrivendo... ({size_mb:.1f}MB)")
        transcript = transcribe_audio(audio_file, api_key)
        
        # Cleanup
        os.unlink(audio_file)
        
        # Elaborazione con OpenAI se disponibile
        openai_key = os.getenv('OPENAI_API_KEY')
        if openai_key:
            print("🤖 Migliorando trascrizione con OpenAI...")
            improved_transcript, summary = improve_transcript_with_openai(transcript, metadata, openai_key)
        else:
            improved_transcript = transcript
            summary = "Elaborazione OpenAI non disponibile (chiave API mancante)"
        
        print("\n📝 TRASCRIZIONE:")
        print("=" * 50)
        print(improved_transcript)
        
        # Opzioni post-trascrizione
        print("\n💾 Vuoi salvare la trascrizione completa?")
        if input("(s/n): ").lower().startswith('s'):
            filename = f"trascrizione_{clean_url.split('/')[-1]}.txt"
            
            # Formatta data
            upload_date = metadata['upload_date']
            if upload_date != 'N/A' and len(upload_date) == 8:
                formatted_date = f"{upload_date[:4]}-{upload_date[4:6]}-{upload_date[6:8]}"
            else:
                formatted_date = upload_date
            
            # Crea contenuto file completo
            file_content = f"""# TRASCRIZIONE VIDEO YOUTUBE
# Generata il: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}

## INFORMAZIONI VIDEO
Titolo: {metadata['title']}
Canale: {metadata['channel']}
Data pubblicazione: {formatted_date}
Durata: {metadata['duration']} secondi
Visualizzazioni: {metadata['view_count']:,} (al momento della trascrizione)
Link: {clean_url}

## SINTESI
{summary}

## DESCRIZIONE
{metadata['description']}

## TRASCRIZIONE COMPLETA
{improved_transcript}

---
Trascritto con YouTube Transcriber
Groq Whisper + {"OpenAI GPT-4o-mini" if openai_key else "Elaborazione base"}
"""
            
            with open(filename, 'w', encoding='utf-8') as f:
                f.write(file_content)
            print(f"✅ Salvato in: {filename}")
        
    except Exception as e:
        print(f"❌ Errore: {e}")

def process_audio_file(file_path):
    """Processa file audio locale"""
    api_key = get_groq_key()
    if not api_key:
        return
    
    try:
        if not os.path.exists(file_path):
            print(f"❌ File non trovato: {file_path}")
            return
        
        size_mb = os.path.getsize(file_path) / (1024 * 1024)
        if size_mb > 25:
            print(f"⚠️ File troppo grande: {size_mb:.1f}MB (limite: 25MB)")
            return
        
        print(f"🎤 Trascrivendo... ({size_mb:.1f}MB)")
        transcript = transcribe_audio(file_path, api_key)
        
        print("\n📝 TRASCRIZIONE:")
        print("=" * 50)
        print(transcript)
        
        # Salvataggio
        print("\n💾 Vuoi salvare la trascrizione?")
        if input("(s/n): ").lower().startswith('s'):
            base_name = os.path.splitext(os.path.basename(file_path))[0]
            filename = f"trascrizione_{base_name}.txt"
            with open(filename, 'w', encoding='utf-8') as f:
                f.write(f"File: {file_path}\n\n{transcript}")
            print(f"✅ Salvato in: {filename}")
        
    except Exception as e:
        print(f"❌ Errore: {e}")

def is_youtube_url(text):
    """Controlla se il testo è un URL YouTube"""
    return any(domain in text.lower() for domain in ['youtube.com', 'youtu.be', 'youtube.be'])

def main():
    # Gestione argomenti
    if len(sys.argv) == 1:
        # Modalità interattiva
        interactive_mode()
    elif len(sys.argv) == 2:
        arg = sys.argv[1]
        
        if arg in ['--help', '-h', 'help']:
            show_help()
        elif arg in ['--setup', 'setup']:
            setup_api_key()
        elif is_youtube_url(arg):
            process_youtube(arg)
        elif os.path.exists(arg):
            process_audio_file(arg)
        else:
            print(f"❌ File non trovato o URL non valido: {arg}")
            print("💡 Usa 'transcribe --help' per aiuto")
    else:
        print("❌ Troppi argomenti")
        print("💡 Usa 'transcribe --help' per aiuto")

if __name__ == '__main__':
    try:
        main()
    except KeyboardInterrupt:
        print("\n👋 Interrotto dall'utente")
    except Exception as e:
        print(f"❌ Errore imprevisto: {e}")
