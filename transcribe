#!/usr/bin/env python3
import sys
import os
import tempfile
import subprocess
import requests

def get_groq_key():
    key = os.getenv('GROQ_API_KEY')
    if not key:
        print("‚ùå GROQ_API_KEY non configurata")
        print("Ottieni una chiave gratuita da: https://console.groq.com/keys")
        print("Poi esegui: export GROQ_API_KEY='la_tua_chiave'")
        print("O aggiungi al tuo ~/.zshrc: export GROQ_API_KEY='la_tua_chiave'")
        sys.exit(1)
    return key

def transcribe_audio(audio_file, api_key):
    with open(audio_file, 'rb') as f:
        response = requests.post(
            'https://api.groq.com/openai/v1/audio/transcriptions',
            headers={'Authorization': f'Bearer {api_key}'},
            files={'file': f},
            data={'model': 'whisper-large-v3', 'language': 'it'}
        )
    
    if response.status_code != 200:
        raise Exception(f"Errore API: {response.status_code}")
    
    return response.json().get('text', '')

def extract_audio_from_youtube(url):
    with tempfile.NamedTemporaryFile(suffix='.mp3', delete=False) as tmp:
        cmd = ['yt-dlp', '--extract-audio', '--audio-format', 'mp3', 
               '--audio-quality', '64K', '--no-check-certificate',
               '-o', tmp.name.replace('.mp3', ''), url]
        
        result = subprocess.run(cmd, capture_output=True, text=True)
        if result.returncode != 0:
            raise Exception(f"Errore download: {result.stderr.strip()}")
        
        return tmp.name

def main():
    if len(sys.argv) != 2:
        print("üé• YouTube Transcriber")
        print("Uso: transcribe <url_youtube_o_file_audio>")
        sys.exit(1)
    
    input_arg = sys.argv[1]
    api_key = get_groq_key()
    
    try:
        if 'youtube.com' in input_arg or 'youtu.be' in input_arg:
            print("üì• Scaricando audio...")
            audio_file = extract_audio_from_youtube(input_arg)
            cleanup_needed = True
        else:
            audio_file = input_arg
            cleanup_needed = False
            if not os.path.exists(audio_file):
                print(f"‚ùå File non trovato: {audio_file}")
                sys.exit(1)
        
        size_mb = os.path.getsize(audio_file) / (1024 * 1024)
        if size_mb > 25:
            print(f"‚ö†Ô∏è File troppo grande: {size_mb:.1f}MB (limite: 25MB)")
            if cleanup_needed:
                os.unlink(audio_file)
            sys.exit(1)
        
        print(f"üé§ Trascrivendo... ({size_mb:.1f}MB)")
        transcript = transcribe_audio(audio_file, api_key)
        
        if cleanup_needed:
            os.unlink(audio_file)
        
        print("\nüìù TRASCRIZIONE:")
        print("-" * 50)
        print(transcript)
        
    except Exception as e:
        print(f"‚ùå Errore: {e}")
        sys.exit(1)

if __name__ == '__main__':
    main()
